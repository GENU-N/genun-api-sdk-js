
const isFunction = require('lodash/isFunction')

const Base = require('./base')
const {
    isValidDateString,
} = require('./utils')


class AuthAPI extends Base {
    constructor ({
        onAuthSuccess,
        onLogoutSuccess,
        endPoints,
        ...config
    } = {}) {
        super({
            ...config,
            baseURL: endPoints.v1.auth,
        })

        this.onAuthSuccess = onAuthSuccess
        this.onLogoutSuccess = onLogoutSuccess
    }

    processAuthSuccess (res) {
        this.Runtime.setToken(res[this.Runtime.tokenKeyInAPIResponse])
        if (isFunction(this.onAuthSuccess)) {
            this.onAuthSuccess(res)
        }
    }

    processLogoutSuccess () {
        this.Runtime.removeToken()
        if (isFunction(this.onLogoutSuccess)) {
            this.onLogoutSuccess()
        }
    }

    /**
     * @api {post} /api/v1/login/wallet Login via Wallet
     * @apiName LoginViaWallet
     * @requires logged-out
     * @apiParam {String} id - required, uuid, generated by client
     * @apiParam {String} account - required, wallet account
     * @apiParam {String} timestamp - required, unix timestamp
     * @apiParam {String} signature - required, an EIP712 signature generated by a wallet tool such as MetaMask
     * @apiParam {String} walletType - required, wallet type
     * @returns {Object} { code: 200, data: { token } }
     */
    async loginWithWallet ({
        id,
        account,
        timestamp,
        signature,
        walletType,
    } = {}) {
        const res = await this.request({
            url: '/login/wallet',
            method: 'post',
            data: {
                id,
                account,
                timestamp,
                signature,
                walletType,
            },
            skipAuth: true,
        })
        await this.processAuthSuccess(res)
        return res
    }

    /**
     * @api {post} /api/v1/logout Logout
     * @apiName Logout
     * @requires logged-in
     * @returns {Object} { code: 200, message: 'You\'ve successfully logged out. See you next time!' }
     */
    async logout () {
        const res = await this.request.post('/logout')
        await this.processLogoutSuccess()
        return res
    }
}


module.exports = AuthAPI
